// source: test.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var test_import_pb = require('./test_import_pb.js');
goog.object.extend(proto, test_import_pb);
goog.exportSymbol('proto.A.B.C.TestEnum', null, global);
goog.exportSymbol('proto.A.B.C.TestMessage', null, global);
goog.exportSymbol('proto.A.B.C.TestMessage.MyOneofCase', null, global);
goog.exportSymbol('proto.A.B.C.TestMessage.NestedMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.A.B.C.TestMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.A.B.C.TestMessage.repeatedFields_, proto.A.B.C.TestMessage.oneofGroups_);
};
goog.inherits(proto.A.B.C.TestMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.A.B.C.TestMessage.displayName = 'proto.A.B.C.TestMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.A.B.C.TestMessage.NestedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.A.B.C.TestMessage.NestedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.A.B.C.TestMessage.NestedMessage.displayName = 'proto.A.B.C.TestMessage.NestedMessage';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.A.B.C.TestMessage.repeatedFields_ = [21,22,23,24,25,26,27,28,29,30,31];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.A.B.C.TestMessage.oneofGroups_ = [[41,42,43,44,45,46,47,48,49,50,51]];

/**
 * @enum {number}
 */
proto.A.B.C.TestMessage.MyOneofCase = {
  MY_ONEOF_NOT_SET: 0,
  ONEOF_INT32: 41,
  ONEOF_INT64: 42,
  ONEOF_UINT32: 43,
  ONEOF_UINT64: 44,
  ONEOF_BOOL: 45,
  ONEOF_DOUBLE: 46,
  ONEOF_FLOAT: 47,
  ONEOF_STRING: 48,
  ONEOF_BYTES: 49,
  ONEOF_ENUM: 50,
  ONEOF_MSG: 51
};

/**
 * @return {proto.A.B.C.TestMessage.MyOneofCase}
 */
proto.A.B.C.TestMessage.prototype.getMyOneofCase = function() {
  return /** @type {proto.A.B.C.TestMessage.MyOneofCase} */(jspb.Message.computeOneofCase(this, proto.A.B.C.TestMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.A.B.C.TestMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.A.B.C.TestMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.A.B.C.TestMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.A.B.C.TestMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    optionalInt32: jspb.Message.getFieldWithDefault(msg, 1, 0),
    optionalInt64: jspb.Message.getFieldWithDefault(msg, 2, 0),
    optionalUint32: jspb.Message.getFieldWithDefault(msg, 3, 0),
    optionalUint64: jspb.Message.getFieldWithDefault(msg, 4, 0),
    optionalBool: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    optionalDouble: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    optionalFloat: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    optionalString: jspb.Message.getFieldWithDefault(msg, 8, ""),
    optionalBytes: msg.getOptionalBytes_asB64(),
    optionalEnum: jspb.Message.getFieldWithDefault(msg, 10, 0),
    optionalMsg: (f = msg.getOptionalMsg()) && proto.A.B.C.TestMessage.toObject(includeInstance, f),
    optionalSubmessage: (f = msg.getOptionalSubmessage()) && test_import_pb.TestImportedMessage.toObject(includeInstance, f),
    repeatedInt32List: (f = jspb.Message.getRepeatedField(msg, 21)) == null ? undefined : f,
    repeatedInt64List: (f = jspb.Message.getRepeatedField(msg, 22)) == null ? undefined : f,
    repeatedUint32List: (f = jspb.Message.getRepeatedField(msg, 23)) == null ? undefined : f,
    repeatedUint64List: (f = jspb.Message.getRepeatedField(msg, 24)) == null ? undefined : f,
    repeatedBoolList: (f = jspb.Message.getRepeatedBooleanField(msg, 25)) == null ? undefined : f,
    repeatedDoubleList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 26)) == null ? undefined : f,
    repeatedFloatList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 27)) == null ? undefined : f,
    repeatedStringList: (f = jspb.Message.getRepeatedField(msg, 28)) == null ? undefined : f,
    repeatedBytesList: msg.getRepeatedBytesList_asB64(),
    repeatedEnumList: (f = jspb.Message.getRepeatedField(msg, 30)) == null ? undefined : f,
    repeatedMsgList: jspb.Message.toObjectList(msg.getRepeatedMsgList(),
    proto.A.B.C.TestMessage.toObject, includeInstance),
    oneofInt32: jspb.Message.getFieldWithDefault(msg, 41, 0),
    oneofInt64: jspb.Message.getFieldWithDefault(msg, 42, 0),
    oneofUint32: jspb.Message.getFieldWithDefault(msg, 43, 0),
    oneofUint64: jspb.Message.getFieldWithDefault(msg, 44, 0),
    oneofBool: jspb.Message.getBooleanFieldWithDefault(msg, 45, false),
    oneofDouble: jspb.Message.getFloatingPointFieldWithDefault(msg, 46, 0.0),
    oneofFloat: jspb.Message.getFloatingPointFieldWithDefault(msg, 47, 0.0),
    oneofString: jspb.Message.getFieldWithDefault(msg, 48, ""),
    oneofBytes: msg.getOneofBytes_asB64(),
    oneofEnum: jspb.Message.getFieldWithDefault(msg, 50, 0),
    oneofMsg: (f = msg.getOneofMsg()) && proto.A.B.C.TestMessage.toObject(includeInstance, f),
    mapInt32StringMap: (f = msg.getMapInt32StringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapInt64StringMap: (f = msg.getMapInt64StringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapUint32StringMap: (f = msg.getMapUint32StringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapUint64StringMap: (f = msg.getMapUint64StringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapBoolStringMap: (f = msg.getMapBoolStringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringStringMap: (f = msg.getMapStringStringMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringMsgMap: (f = msg.getMapStringMsgMap()) ? f.toObject(includeInstance, proto.A.B.C.TestMessage.toObject) : [],
    mapStringEnumMap: (f = msg.getMapStringEnumMap()) ? f.toObject(includeInstance, undefined) : [],
    mapStringInt32Map: (f = msg.getMapStringInt32Map()) ? f.toObject(includeInstance, undefined) : [],
    mapStringBoolMap: (f = msg.getMapStringBoolMap()) ? f.toObject(includeInstance, undefined) : [],
    nestedMessage: (f = msg.getNestedMessage()) && proto.A.B.C.TestMessage.NestedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.A.B.C.TestMessage}
 */
proto.A.B.C.TestMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.A.B.C.TestMessage;
  return proto.A.B.C.TestMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.A.B.C.TestMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.A.B.C.TestMessage}
 */
proto.A.B.C.TestMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOptionalInt32(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOptionalInt64(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOptionalUint32(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOptionalUint64(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptionalBool(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOptionalDouble(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOptionalFloat(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptionalString(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOptionalBytes(value);
      break;
    case 10:
      var value = /** @type {!proto.A.B.C.TestEnum} */ (reader.readEnum());
      msg.setOptionalEnum(value);
      break;
    case 11:
      var value = new proto.A.B.C.TestMessage;
      reader.readMessage(value,proto.A.B.C.TestMessage.deserializeBinaryFromReader);
      msg.setOptionalMsg(value);
      break;
    case 12:
      var value = new test_import_pb.TestImportedMessage;
      reader.readMessage(value,test_import_pb.TestImportedMessage.deserializeBinaryFromReader);
      msg.setOptionalSubmessage(value);
      break;
    case 21:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedInt32(values[i]);
      }
      break;
    case 22:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedInt64(values[i]);
      }
      break;
    case 23:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedUint32(values[i]);
      }
      break;
    case 24:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedUint64(values[i]);
      }
      break;
    case 25:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedBool(values[i]);
      }
      break;
    case 26:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedDouble(values[i]);
      }
      break;
    case 27:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedFloat(values[i]);
      }
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.addRepeatedString(value);
      break;
    case 29:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRepeatedBytes(value);
      break;
    case 30:
      var values = /** @type {!Array<!proto.A.B.C.TestEnum>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRepeatedEnum(values[i]);
      }
      break;
    case 31:
      var value = new proto.A.B.C.TestMessage;
      reader.readMessage(value,proto.A.B.C.TestMessage.deserializeBinaryFromReader);
      msg.addRepeatedMsg(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOneofInt32(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOneofInt64(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOneofUint32(value);
      break;
    case 44:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOneofUint64(value);
      break;
    case 45:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOneofBool(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOneofDouble(value);
      break;
    case 47:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOneofFloat(value);
      break;
    case 48:
      var value = /** @type {string} */ (reader.readString());
      msg.setOneofString(value);
      break;
    case 49:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOneofBytes(value);
      break;
    case 50:
      var value = /** @type {!proto.A.B.C.TestEnum} */ (reader.readEnum());
      msg.setOneofEnum(value);
      break;
    case 51:
      var value = new proto.A.B.C.TestMessage;
      reader.readMessage(value,proto.A.B.C.TestMessage.deserializeBinaryFromReader);
      msg.setOneofMsg(value);
      break;
    case 61:
      var value = msg.getMapInt32StringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 62:
      var value = msg.getMapInt64StringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 63:
      var value = msg.getMapUint32StringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 64:
      var value = msg.getMapUint64StringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 65:
      var value = msg.getMapBoolStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readBool, jspb.BinaryReader.prototype.readString, null, false, "");
         });
      break;
    case 66:
      var value = msg.getMapStringStringMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 67:
      var value = msg.getMapStringMsgMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.A.B.C.TestMessage.deserializeBinaryFromReader, "", new proto.A.B.C.TestMessage());
         });
      break;
    case 68:
      var value = msg.getMapStringEnumMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "", 0);
         });
      break;
    case 69:
      var value = msg.getMapStringInt32Map();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "", 0);
         });
      break;
    case 70:
      var value = msg.getMapStringBoolMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    case 80:
      var value = new proto.A.B.C.TestMessage.NestedMessage;
      reader.readMessage(value,proto.A.B.C.TestMessage.NestedMessage.deserializeBinaryFromReader);
      msg.setNestedMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.A.B.C.TestMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.A.B.C.TestMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.A.B.C.TestMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.A.B.C.TestMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptionalInt32();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOptionalInt64();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getOptionalUint32();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOptionalUint64();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOptionalBool();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getOptionalDouble();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getOptionalFloat();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getOptionalString();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOptionalBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getOptionalEnum();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getOptionalMsg();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.A.B.C.TestMessage.serializeBinaryToWriter
    );
  }
  f = message.getOptionalSubmessage();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      test_import_pb.TestImportedMessage.serializeBinaryToWriter
    );
  }
  f = message.getRepeatedInt32List();
  if (f.length > 0) {
    writer.writePackedInt32(
      21,
      f
    );
  }
  f = message.getRepeatedInt64List();
  if (f.length > 0) {
    writer.writePackedInt64(
      22,
      f
    );
  }
  f = message.getRepeatedUint32List();
  if (f.length > 0) {
    writer.writePackedUint32(
      23,
      f
    );
  }
  f = message.getRepeatedUint64List();
  if (f.length > 0) {
    writer.writePackedUint64(
      24,
      f
    );
  }
  f = message.getRepeatedBoolList();
  if (f.length > 0) {
    writer.writePackedBool(
      25,
      f
    );
  }
  f = message.getRepeatedDoubleList();
  if (f.length > 0) {
    writer.writePackedDouble(
      26,
      f
    );
  }
  f = message.getRepeatedFloatList();
  if (f.length > 0) {
    writer.writePackedFloat(
      27,
      f
    );
  }
  f = message.getRepeatedStringList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      28,
      f
    );
  }
  f = message.getRepeatedBytesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      29,
      f
    );
  }
  f = message.getRepeatedEnumList();
  if (f.length > 0) {
    writer.writePackedEnum(
      30,
      f
    );
  }
  f = message.getRepeatedMsgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      31,
      f,
      proto.A.B.C.TestMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 41));
  if (f != null) {
    writer.writeInt32(
      41,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 42));
  if (f != null) {
    writer.writeInt64(
      42,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 43));
  if (f != null) {
    writer.writeUint32(
      43,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 44));
  if (f != null) {
    writer.writeUint64(
      44,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 45));
  if (f != null) {
    writer.writeBool(
      45,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 46));
  if (f != null) {
    writer.writeDouble(
      46,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 47));
  if (f != null) {
    writer.writeFloat(
      47,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 48));
  if (f != null) {
    writer.writeString(
      48,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 49));
  if (f != null) {
    writer.writeBytes(
      49,
      f
    );
  }
  f = /** @type {!proto.A.B.C.TestEnum} */ (jspb.Message.getField(message, 50));
  if (f != null) {
    writer.writeEnum(
      50,
      f
    );
  }
  f = message.getOneofMsg();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.A.B.C.TestMessage.serializeBinaryToWriter
    );
  }
  f = message.getMapInt32StringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(61, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapInt64StringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(62, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapUint32StringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(63, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapUint64StringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(64, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapBoolStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(65, writer, jspb.BinaryWriter.prototype.writeBool, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapStringStringMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(66, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getMapStringMsgMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(67, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.A.B.C.TestMessage.serializeBinaryToWriter);
  }
  f = message.getMapStringEnumMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(68, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getMapStringInt32Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(69, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getMapStringBoolMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(70, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getNestedMessage();
  if (f != null) {
    writer.writeMessage(
      80,
      f,
      proto.A.B.C.TestMessage.NestedMessage.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.A.B.C.TestMessage.NestedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.A.B.C.TestMessage.NestedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.A.B.C.TestMessage.NestedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.A.B.C.TestMessage.NestedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    foo: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.A.B.C.TestMessage.NestedMessage}
 */
proto.A.B.C.TestMessage.NestedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.A.B.C.TestMessage.NestedMessage;
  return proto.A.B.C.TestMessage.NestedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.A.B.C.TestMessage.NestedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.A.B.C.TestMessage.NestedMessage}
 */
proto.A.B.C.TestMessage.NestedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFoo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.A.B.C.TestMessage.NestedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.A.B.C.TestMessage.NestedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.A.B.C.TestMessage.NestedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.A.B.C.TestMessage.NestedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFoo();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 foo = 1;
 * @return {number}
 */
proto.A.B.C.TestMessage.NestedMessage.prototype.getFoo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage.NestedMessage} returns this
 */
proto.A.B.C.TestMessage.NestedMessage.prototype.setFoo = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 optional_int32 = 1;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOptionalInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalInt32 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 optional_int64 = 2;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOptionalInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalInt64 = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 optional_uint32 = 3;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOptionalUint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalUint32 = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 optional_uint64 = 4;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOptionalUint64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalUint64 = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool optional_bool = 5;
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.getOptionalBool = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalBool = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional double optional_double = 6;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOptionalDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalDouble = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float optional_float = 7;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOptionalFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalFloat = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string optional_string = 8;
 * @return {string}
 */
proto.A.B.C.TestMessage.prototype.getOptionalString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalString = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bytes optional_bytes = 9;
 * @return {string}
 */
proto.A.B.C.TestMessage.prototype.getOptionalBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes optional_bytes = 9;
 * This is a type-conversion wrapper around `getOptionalBytes()`
 * @return {string}
 */
proto.A.B.C.TestMessage.prototype.getOptionalBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOptionalBytes()));
};


/**
 * optional bytes optional_bytes = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOptionalBytes()`
 * @return {!Uint8Array}
 */
proto.A.B.C.TestMessage.prototype.getOptionalBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOptionalBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional TestEnum optional_enum = 10;
 * @return {!proto.A.B.C.TestEnum}
 */
proto.A.B.C.TestMessage.prototype.getOptionalEnum = function() {
  return /** @type {!proto.A.B.C.TestEnum} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.A.B.C.TestEnum} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOptionalEnum = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional TestMessage optional_msg = 11;
 * @return {?proto.A.B.C.TestMessage}
 */
proto.A.B.C.TestMessage.prototype.getOptionalMsg = function() {
  return /** @type{?proto.A.B.C.TestMessage} */ (
    jspb.Message.getWrapperField(this, proto.A.B.C.TestMessage, 11));
};


/**
 * @param {?proto.A.B.C.TestMessage|undefined} value
 * @return {!proto.A.B.C.TestMessage} returns this
*/
proto.A.B.C.TestMessage.prototype.setOptionalMsg = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOptionalMsg = function() {
  return this.setOptionalMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOptionalMsg = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional TestImportedMessage optional_submessage = 12;
 * @return {?proto.A.B.C.TestImportedMessage}
 */
proto.A.B.C.TestMessage.prototype.getOptionalSubmessage = function() {
  return /** @type{?proto.A.B.C.TestImportedMessage} */ (
    jspb.Message.getWrapperField(this, test_import_pb.TestImportedMessage, 12));
};


/**
 * @param {?proto.A.B.C.TestImportedMessage|undefined} value
 * @return {!proto.A.B.C.TestMessage} returns this
*/
proto.A.B.C.TestMessage.prototype.setOptionalSubmessage = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOptionalSubmessage = function() {
  return this.setOptionalSubmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOptionalSubmessage = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated int32 repeated_int32 = 21;
 * @return {!Array<number>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedInt32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 21));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedInt32List = function(value) {
  return jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedInt32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedInt32List = function() {
  return this.setRepeatedInt32List([]);
};


/**
 * repeated int64 repeated_int64 = 22;
 * @return {!Array<number>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedInt64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 22));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedInt64List = function(value) {
  return jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedInt64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedInt64List = function() {
  return this.setRepeatedInt64List([]);
};


/**
 * repeated uint32 repeated_uint32 = 23;
 * @return {!Array<number>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedUint32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 23));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedUint32List = function(value) {
  return jspb.Message.setField(this, 23, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedUint32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 23, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedUint32List = function() {
  return this.setRepeatedUint32List([]);
};


/**
 * repeated uint64 repeated_uint64 = 24;
 * @return {!Array<number>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedUint64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 24));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedUint64List = function(value) {
  return jspb.Message.setField(this, 24, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedUint64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 24, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedUint64List = function() {
  return this.setRepeatedUint64List([]);
};


/**
 * repeated bool repeated_bool = 25;
 * @return {!Array<boolean>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedBoolList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 25));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedBoolList = function(value) {
  return jspb.Message.setField(this, 25, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedBool = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 25, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedBoolList = function() {
  return this.setRepeatedBoolList([]);
};


/**
 * repeated double repeated_double = 26;
 * @return {!Array<number>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedDoubleList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 26));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedDoubleList = function(value) {
  return jspb.Message.setField(this, 26, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedDouble = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 26, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedDoubleList = function() {
  return this.setRepeatedDoubleList([]);
};


/**
 * repeated float repeated_float = 27;
 * @return {!Array<number>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedFloatList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 27));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedFloatList = function(value) {
  return jspb.Message.setField(this, 27, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedFloat = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 27, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedFloatList = function() {
  return this.setRepeatedFloatList([]);
};


/**
 * repeated string repeated_string = 28;
 * @return {!Array<string>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedStringList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 28));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedStringList = function(value) {
  return jspb.Message.setField(this, 28, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedString = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 28, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedStringList = function() {
  return this.setRepeatedStringList([]);
};


/**
 * repeated bytes repeated_bytes = 29;
 * @return {!Array<string>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedBytesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 29));
};


/**
 * repeated bytes repeated_bytes = 29;
 * This is a type-conversion wrapper around `getRepeatedBytesList()`
 * @return {!Array<string>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedBytesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRepeatedBytesList()));
};


/**
 * repeated bytes repeated_bytes = 29;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRepeatedBytesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedBytesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRepeatedBytesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedBytesList = function(value) {
  return jspb.Message.setField(this, 29, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedBytes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 29, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedBytesList = function() {
  return this.setRepeatedBytesList([]);
};


/**
 * repeated TestEnum repeated_enum = 30;
 * @return {!Array<!proto.A.B.C.TestEnum>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedEnumList = function() {
  return /** @type {!Array<!proto.A.B.C.TestEnum>} */ (jspb.Message.getRepeatedField(this, 30));
};


/**
 * @param {!Array<!proto.A.B.C.TestEnum>} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setRepeatedEnumList = function(value) {
  return jspb.Message.setField(this, 30, value || []);
};


/**
 * @param {!proto.A.B.C.TestEnum} value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.addRepeatedEnum = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 30, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedEnumList = function() {
  return this.setRepeatedEnumList([]);
};


/**
 * repeated TestMessage repeated_msg = 31;
 * @return {!Array<!proto.A.B.C.TestMessage>}
 */
proto.A.B.C.TestMessage.prototype.getRepeatedMsgList = function() {
  return /** @type{!Array<!proto.A.B.C.TestMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.A.B.C.TestMessage, 31));
};


/**
 * @param {!Array<!proto.A.B.C.TestMessage>} value
 * @return {!proto.A.B.C.TestMessage} returns this
*/
proto.A.B.C.TestMessage.prototype.setRepeatedMsgList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 31, value);
};


/**
 * @param {!proto.A.B.C.TestMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.A.B.C.TestMessage}
 */
proto.A.B.C.TestMessage.prototype.addRepeatedMsg = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 31, opt_value, proto.A.B.C.TestMessage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearRepeatedMsgList = function() {
  return this.setRepeatedMsgList([]);
};


/**
 * optional int32 oneof_int32 = 41;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOneofInt32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofInt32 = function(value) {
  return jspb.Message.setOneofField(this, 41, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofInt32 = function() {
  return jspb.Message.setOneofField(this, 41, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofInt32 = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional int64 oneof_int64 = 42;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOneofInt64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofInt64 = function(value) {
  return jspb.Message.setOneofField(this, 42, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofInt64 = function() {
  return jspb.Message.setOneofField(this, 42, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofInt64 = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional uint32 oneof_uint32 = 43;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOneofUint32 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofUint32 = function(value) {
  return jspb.Message.setOneofField(this, 43, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofUint32 = function() {
  return jspb.Message.setOneofField(this, 43, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofUint32 = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional uint64 oneof_uint64 = 44;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOneofUint64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 44, 0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofUint64 = function(value) {
  return jspb.Message.setOneofField(this, 44, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofUint64 = function() {
  return jspb.Message.setOneofField(this, 44, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofUint64 = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * optional bool oneof_bool = 45;
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.getOneofBool = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 45, false));
};


/**
 * @param {boolean} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofBool = function(value) {
  return jspb.Message.setOneofField(this, 45, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofBool = function() {
  return jspb.Message.setOneofField(this, 45, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofBool = function() {
  return jspb.Message.getField(this, 45) != null;
};


/**
 * optional double oneof_double = 46;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOneofDouble = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 46, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofDouble = function(value) {
  return jspb.Message.setOneofField(this, 46, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofDouble = function() {
  return jspb.Message.setOneofField(this, 46, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofDouble = function() {
  return jspb.Message.getField(this, 46) != null;
};


/**
 * optional float oneof_float = 47;
 * @return {number}
 */
proto.A.B.C.TestMessage.prototype.getOneofFloat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 47, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofFloat = function(value) {
  return jspb.Message.setOneofField(this, 47, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofFloat = function() {
  return jspb.Message.setOneofField(this, 47, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofFloat = function() {
  return jspb.Message.getField(this, 47) != null;
};


/**
 * optional string oneof_string = 48;
 * @return {string}
 */
proto.A.B.C.TestMessage.prototype.getOneofString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 48, ""));
};


/**
 * @param {string} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofString = function(value) {
  return jspb.Message.setOneofField(this, 48, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofString = function() {
  return jspb.Message.setOneofField(this, 48, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofString = function() {
  return jspb.Message.getField(this, 48) != null;
};


/**
 * optional bytes oneof_bytes = 49;
 * @return {string}
 */
proto.A.B.C.TestMessage.prototype.getOneofBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 49, ""));
};


/**
 * optional bytes oneof_bytes = 49;
 * This is a type-conversion wrapper around `getOneofBytes()`
 * @return {string}
 */
proto.A.B.C.TestMessage.prototype.getOneofBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOneofBytes()));
};


/**
 * optional bytes oneof_bytes = 49;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOneofBytes()`
 * @return {!Uint8Array}
 */
proto.A.B.C.TestMessage.prototype.getOneofBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOneofBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofBytes = function(value) {
  return jspb.Message.setOneofField(this, 49, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofBytes = function() {
  return jspb.Message.setOneofField(this, 49, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofBytes = function() {
  return jspb.Message.getField(this, 49) != null;
};


/**
 * optional TestEnum oneof_enum = 50;
 * @return {!proto.A.B.C.TestEnum}
 */
proto.A.B.C.TestMessage.prototype.getOneofEnum = function() {
  return /** @type {!proto.A.B.C.TestEnum} */ (jspb.Message.getFieldWithDefault(this, 50, 0));
};


/**
 * @param {!proto.A.B.C.TestEnum} value
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.setOneofEnum = function(value) {
  return jspb.Message.setOneofField(this, 50, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofEnum = function() {
  return jspb.Message.setOneofField(this, 50, proto.A.B.C.TestMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofEnum = function() {
  return jspb.Message.getField(this, 50) != null;
};


/**
 * optional TestMessage oneof_msg = 51;
 * @return {?proto.A.B.C.TestMessage}
 */
proto.A.B.C.TestMessage.prototype.getOneofMsg = function() {
  return /** @type{?proto.A.B.C.TestMessage} */ (
    jspb.Message.getWrapperField(this, proto.A.B.C.TestMessage, 51));
};


/**
 * @param {?proto.A.B.C.TestMessage|undefined} value
 * @return {!proto.A.B.C.TestMessage} returns this
*/
proto.A.B.C.TestMessage.prototype.setOneofMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 51, proto.A.B.C.TestMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearOneofMsg = function() {
  return this.setOneofMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasOneofMsg = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * map<int32, string> map_int32_string = 61;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.A.B.C.TestMessage.prototype.getMapInt32StringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 61, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapInt32StringMap = function() {
  this.getMapInt32StringMap().clear();
  return this;};


/**
 * map<int64, string> map_int64_string = 62;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.A.B.C.TestMessage.prototype.getMapInt64StringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 62, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapInt64StringMap = function() {
  this.getMapInt64StringMap().clear();
  return this;};


/**
 * map<uint32, string> map_uint32_string = 63;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.A.B.C.TestMessage.prototype.getMapUint32StringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 63, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapUint32StringMap = function() {
  this.getMapUint32StringMap().clear();
  return this;};


/**
 * map<uint64, string> map_uint64_string = 64;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.A.B.C.TestMessage.prototype.getMapUint64StringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 64, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapUint64StringMap = function() {
  this.getMapUint64StringMap().clear();
  return this;};


/**
 * map<bool, string> map_bool_string = 65;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<boolean,string>}
 */
proto.A.B.C.TestMessage.prototype.getMapBoolStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<boolean,string>} */ (
      jspb.Message.getMapField(this, 65, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapBoolStringMap = function() {
  this.getMapBoolStringMap().clear();
  return this;};


/**
 * map<string, string> map_string_string = 66;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.A.B.C.TestMessage.prototype.getMapStringStringMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 66, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapStringStringMap = function() {
  this.getMapStringStringMap().clear();
  return this;};


/**
 * map<string, TestMessage> map_string_msg = 67;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.A.B.C.TestMessage>}
 */
proto.A.B.C.TestMessage.prototype.getMapStringMsgMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.A.B.C.TestMessage>} */ (
      jspb.Message.getMapField(this, 67, opt_noLazyCreate,
      proto.A.B.C.TestMessage));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapStringMsgMap = function() {
  this.getMapStringMsgMap().clear();
  return this;};


/**
 * map<string, TestEnum> map_string_enum = 68;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.A.B.C.TestEnum>}
 */
proto.A.B.C.TestMessage.prototype.getMapStringEnumMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.A.B.C.TestEnum>} */ (
      jspb.Message.getMapField(this, 68, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapStringEnumMap = function() {
  this.getMapStringEnumMap().clear();
  return this;};


/**
 * map<string, int32> map_string_int32 = 69;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.A.B.C.TestMessage.prototype.getMapStringInt32Map = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 69, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapStringInt32Map = function() {
  this.getMapStringInt32Map().clear();
  return this;};


/**
 * map<string, bool> map_string_bool = 70;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.A.B.C.TestMessage.prototype.getMapStringBoolMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 70, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearMapStringBoolMap = function() {
  this.getMapStringBoolMap().clear();
  return this;};


/**
 * optional NestedMessage nested_message = 80;
 * @return {?proto.A.B.C.TestMessage.NestedMessage}
 */
proto.A.B.C.TestMessage.prototype.getNestedMessage = function() {
  return /** @type{?proto.A.B.C.TestMessage.NestedMessage} */ (
    jspb.Message.getWrapperField(this, proto.A.B.C.TestMessage.NestedMessage, 80));
};


/**
 * @param {?proto.A.B.C.TestMessage.NestedMessage|undefined} value
 * @return {!proto.A.B.C.TestMessage} returns this
*/
proto.A.B.C.TestMessage.prototype.setNestedMessage = function(value) {
  return jspb.Message.setWrapperField(this, 80, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.A.B.C.TestMessage} returns this
 */
proto.A.B.C.TestMessage.prototype.clearNestedMessage = function() {
  return this.setNestedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.A.B.C.TestMessage.prototype.hasNestedMessage = function() {
  return jspb.Message.getField(this, 80) != null;
};


/**
 * @enum {number}
 */
proto.A.B.C.TestEnum = {
  DEFAULT: 0,
  A: 1,
  B: 2,
  C: 3
};

goog.object.extend(exports, proto.A.B.C);
module.exports = proto.A.B.C.TestEnummodule.exports = proto.A.B.C.TestMessagemodule.exports = proto.A.B.C.TestMessage.MyOneofCasemodule.exports = proto.A.B.C.TestMessage.NestedMessage